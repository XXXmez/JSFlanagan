const main = document.querySelector('.main');

function addContent (name, text) {
    main.innerHTML += `
        <div class="content">
            <div class="contentText">
                <span class="nameContent">${name}</span>
                <span class="textContent">${text}</span>
            </div>
        </div>
    `
}

// 4.1. Первичные выражения
    // Первичными выражениями в JavaScript являются константы или литеральные значения, 
    // определенные ключевые слова языка и ссылки на переменные
    
    // Литералы — это постоянные значения, встроенные напрямую в программу
        1.23            // числоловой литерал
        'string'        // строковый  литерал
        // /шаблон/     // регулярный литерал

    // Зарезервированные первичными выражениями
        true        // Вычисляется как булевское истинное значение
        false       // Вычисляется как булевское ложное значение
        null        // Вычисляется как нулевое значение
        this        // Вычисляется как "текущий” объект
    
    // третий тип первичных выражений представляет собой ссылку на
    // переменную, константу или свойство глобального объекта:
        // i                // Вычисляется как значение переменной i
        // sum              // Вычисляется как значение переменной sum
        // undefined        // Вычисляется как "неопределенное" свойство глобального объекта

    // ReferenceError - переменной не существует


// 4.2. Инициализаторы объектов и массивов
    // Инициализаторы объектов и массивов — это выражения, значениями которых
    // будут вновь созданные объекты или массивы

    // Инициализатор массива представляет собой разделяемый запятыми список сражений, содержащийся в квадратных скобках
        let array1 = [];                // Пустой массив 
        let array2 = [1+3, 4+3];        // Двухэлементный массив 4 7
        addContent('Инициализация массива', 'let array = [1,2,3];');

    // выражения элементов в инициализаторе мас
    // сами могут быть инициализаторами мас
    // Вложенный массив
        let array3 = [[1],[2,3],[4,5,6]];

    // В литерал массива можно включать неопределенные элементы
        let array4 = [1,,,,5];      // => [1, пусто × 3, 5]
        addContent('Неопределенные элементы в массиве', 'let array = [1,,,,5];');

    // В инициализаторе массива разрешена хвостовая запятая, неопеделенного массива не будет
        let array5 = [1,2,3,];      // => [1, 2, 3]
    
    // Инициализатор объектов похоже на массивы
    // квадратные скобки [] меняются на фигурные {}
    // каждое подвыражение снабжается префиксом с именем свойства и двоеточием
        let object1 = {};
        let object2 = {x:1, y:2, z:3};
        addContent('Инициализация объекта', 'let object = {x:1, y:2, z:3};');

    // Вложенные объектные литералы
        let object3 = {
            obj1: {x: 1, y: 2},
            obj2: {x: 3, y: 4}
        };

// 4.3. Выражения определений функций
    let square = function (x) { return x * x };         // квадрат  числа
    addContent('Выражения определений функций', 'let square = function (x) { return x * x };');
    
// 4.4. Выражения доступа к свойствам
    // Есть два вида синтаксиса для доступа к свойствам 
    // выражение . идентификатор
    // выражение [ выражение ]

    let object4 = {x:1, y: {z:2, c: 3}, 'xy xy': 'пробел'};
    let array6 = [object4 , 1,[2,3]];

    console.log(object4.x);
    console.log(object4.y.z);
    console.log(object4['x']);
    console.log(object4['xy xy']);
    
    console.log(array6[1]);
    console.log(array6[2]['1']);
    console.log(array6[0].y);

    addContent('Выражения доступа к свойствам', 'array6[2][\'1\'];');

    // 4.4.1. Условный доступ к свойствам
        // В ES2020 появились два новых вида выражений доступа к свойствам:
        // выражение ?. идентификатор
        // выражение ?. [ выражение ]

        let a = {b:{c: 5}};

        console.log(a.b);
        console.log(a?.b);
        console.log(a.b.c.d);           // Если без условного доступа то это конец
        console.log(a.b.c?.d?.a);       // Если использовать ?. тогда можно проверять на сколько хочешь глубоко ошибки не будет только undefined


// 4.5. Выражения вызова
    // Выражение вызова — это синтаксис JavaScript для вызова (либо выполнения) функции или метода
    function f1 (e) {return (e)};
    console.log(f1(0));                  //  f1 - выражение функции; 0 - выражение аргумента
    console.log(Math.max(1,2,3));        //  Math.max - - выражение функции; 1,2,3 - выражение аргумента
    console.log([3,1,2].sort());         //  sort() - выражение функции; [3,1,2] - выражение аргумента

    // 4.5.1. Условный вызов
        // В ES2020 функцию можно вызывать также с применением ?. () вместо ()
    
    addContent('Выражения вызова', 'синтаксис JavaScript для вызова (либо выполнения) функции или метода. Пример : f1(0)');